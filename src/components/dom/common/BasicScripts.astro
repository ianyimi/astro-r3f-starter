<script>
	import { SITE } from "~/config.mjs";

	const defaultTheme = SITE.defaultTheme;

	function applyTheme(theme: string) {
		if (theme === "dark") {
			document.querySelector(":root")?.classList.add("dark");
		} else {
			document.querySelector(":root")?.classList.remove("dark");
		}
	}

	if (
		(defaultTheme && defaultTheme.endsWith(":only")) ||
		(!localStorage.theme && defaultTheme !== "system")
	) {
		applyTheme(defaultTheme.replace(":only", ""));
	} else if (
		localStorage.theme === "dark" ||
		(!("theme" in localStorage) &&
			window.matchMedia("(prefers-color-scheme: dark)").matches)
	) {
		applyTheme("dark");
	} else {
		applyTheme("light");
	}

	function attachEvent(
		selector: string,
		event: string,
		fn: (e: Event, elem: Element) => void,
	) {
		const matches =
			typeof selector === "string"
				? document.querySelectorAll(selector)
				: selector;
		if (matches && matches.length) {
			matches.forEach((elem) => {
				elem.addEventListener(event, (e) => fn(e, elem), false);
			});
		}
	}

	window.onload = function () {
		document.body.classList.remove("loading");

		attachEvent("[data-aw-toggle-color-scheme]", "click", function () {
			if (defaultTheme.endsWith(":only")) {
				return;
			}
			document.documentElement.classList.toggle("dark");
			localStorage.theme = document.documentElement.classList.contains("dark")
				? "dark"
				: "light";
		});

		attachEvent("[data-aw-social-share]", "click", function (_, elem) {
			const network = elem.getAttribute("data-aw-social-share");
			const url = encodeURIComponent(elem.getAttribute("data-aw-url")!);
			const text = encodeURIComponent(elem.getAttribute("data-aw-text")!);

			let href;
			switch (network) {
				case "facebook":
					href = `https://www.facebook.com/sharer.php?u=${url}`;
					break;
				case "twitter":
					href = `https://twitter.com/intent/tweet?url=${url}&text=${text}`;
					break;
				case "linkedin":
					href = `https://www.linkedin.com/shareArticle?mini=true&url=${url}&title=${text}`;
					break;
				case "whatsapp":
					href = `https://wa.me/?text=${text}%20${url}`;
					break;
				case "mail":
					href = `mailto:?subject=%22${text}%22&body=${text}%20${url}`;
					break;

				default:
					return;
			}

			const newlink = document.createElement("a");
			newlink.target = "_blank";
			newlink.href = href;
			newlink.click();
		});
	};

	window.onpageshow = function () {
		document.documentElement.classList.add("motion-safe:scroll-smooth");
		const elem = document.querySelector("[data-aw-toggle-menu]");
		if (elem) {
			elem.classList.remove("expanded");
		}
		document.body.classList.remove("overflow-hidden");
		document.getElementById("header")?.classList.remove("h-screen");
		document.querySelector("#header nav")?.classList.add("hidden");
	};

	// Nightwind helper is now imported from the JS file in ThemeToggle component
	// This implementation remains here as a fallback and for non-React use
	var nightwind = {
		beforeTransition: () => {
			const doc = document.documentElement;
			const onTransitionDone = () => {
				doc.classList.remove("nightwind");
				doc.removeEventListener("transitionend", onTransitionDone);
			};
			doc.addEventListener("transitionend", onTransitionDone);
			if (!doc.classList.contains("nightwind")) {
				doc.classList.add("nightwind");
			}
		},

		toggle: () => {
			nightwind.beforeTransition();
			if (!document.documentElement.classList.contains("dark")) {
				document.documentElement.classList.add("dark");
				window.localStorage.setItem("nightwind-mode", "dark");
			} else {
				document.documentElement.classList.remove("dark");
				window.localStorage.setItem("nightwind-mode", "light");
			}
		},

		enable: (dark) => {
			const mode = dark ? "dark" : "light";
			const opposite = dark ? "light" : "dark";

			nightwind.beforeTransition();

			if (document.documentElement.classList.contains(opposite)) {
				document.documentElement.classList.remove(opposite);
			}
			document.documentElement.classList.add(mode);
			window.localStorage.setItem("nightwind-mode", mode);
		},
	};

	function getInitialColorMode() {
		const persistedColorPreference =
			window.localStorage.getItem("nightwind-mode");
		const hasPersistedPreference = typeof persistedColorPreference === "string";
		if (hasPersistedPreference) {
			return persistedColorPreference;
		}
		const mql = window.matchMedia("(prefers-color-scheme: dark)");
		const hasMediaQueryPreference = typeof mql.matches === "boolean";
		if (hasMediaQueryPreference) {
			return mql.matches ? "dark" : "light";
		}
		return "light";
	}
	getInitialColorMode() == "light"
		? document.documentElement.classList.remove("dark")
		: document.documentElement.classList.add("dark");
</script>
